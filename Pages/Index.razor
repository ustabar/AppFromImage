@page "/"
@using EShopApp.Models
@using EShopApp.Services
@inject ProductService ProductService
@inject CartService CartService
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<div class="hero-section">
    <div class="hero-content">
        <div class="logo">
            <img src="/images/logo.svg" alt="Northern Mountains" />
        </div>
        <div class="user-section">
            @if (AuthService.IsLoggedIn)
            {
                <span class="welcome-message">Welcome @AuthService.CurrentUser</span>
            }
            
            <div class="user-actions">
                @if (AuthService.IsLoggedIn)
                {
                    <span class="logout-icon" @onclick="Logout" title="Logout">ðŸšª</span>
                }
                else
                {
                    <span class="user-icon" @onclick="ShowLoginModal" title="Login">ðŸ‘¤</span>
                }
                <span class="cart-icon" @onclick="NavigateToCart" title="Shopping Cart">
                    ðŸ›’
                    @if (cartItemCount > 0)
                    {
                        <span class="cart-badge">@cartItemCount</span>
                    }
                </span>
            </div>
        </div>
    </div>
    
    <div class="hero-text">
        <h1>Ready for a new adventure?</h1>
        <p>Start the season with the latest in clothing and equipment.</p>
    </div>
</div>

@if (showLoginNotification)
{
    <div class="login-notification-overlay" @onclick="CloseLoginModal">
        <div class="login-notification" @onclick:stopPropagation="true">
            <div class="login-header">
                <h3>Login</h3>
                <span class="close-btn" @onclick="CloseLoginModal">âœ•</span>
            </div>
            <div class="login-form">
                <div class="form-group">
                    <label>User:</label>
                    <input type="text" @bind="username" @onkeypress="@((e) => { if (e.Key == \"Enter\") HandleLogin(); })" placeholder="Enter username" />
                </div>
                
                <div class="form-group">
                    <label>Password:</label>
                    <input type="password" @bind="password" @onkeypress="@((e) => { if (e.Key == \"Enter\") HandleLogin(); })" placeholder="Enter password" />
                </div>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">@errorMessage</div>
                }
                
                <div class="form-actions">
                    <button class="btn btn-primary" @onclick="HandleLogin">Login</button>
                    <button class="btn btn-secondary" @onclick="CloseLoginModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="main-content">
    <div class="products-grid">
        @foreach (var product in filteredProducts)
        {
            <div class="product-card">
                <img src="@product.ImageUrl" alt="@product.Name" />
                <h4>@product.Name</h4>
                <p class="brand">@product.Brand</p>
                <p class="price">$@product.Price.ToString("F2")</p>
                <button class="btn btn-primary" @onclick="() => AddToCart(product)">Add to Cart</button>
            </div>
        }
    </div>
</div>

@code {
    private List<Product> products = new();
    private List<Product> filteredProducts = new();
    private List<string> brands = new();
    private List<string> types = new();
    
    private bool showLoginNotification = false;
    private string username = "";
    private string password = "";
    private string errorMessage = "";
    private int cartItemCount = 0;
    
    private string selectedBrand = "All";
    private string selectedType = "All";
    private bool showFilters = false;

    protected override void OnInitialized()
    {
        products = ProductService.GetProducts();
        filteredProducts = products;
        brands = ProductService.GetBrands();
        types = ProductService.GetTypes();
        
        CartService.CartChanged += OnCartChanged;
        AuthService.AuthStateChanged += OnAuthStateChanged;
        
        cartItemCount = CartService.GetCartItemCount();
    }

    private void OnCartChanged()
    {
        cartItemCount = CartService.GetCartItemCount();
        InvokeAsync(StateHasChanged);
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ShowLoginModal()
    {
        showLoginNotification = true;
        username = "";
        password = "";
        errorMessage = "";
    }

    private void CloseLoginModal()
    {
        showLoginNotification = false;
        username = "";
        password = "";
        errorMessage = "";
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter a username";
            return;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Please enter a password";
            return;
        }

        await AuthService.LoginAsync(username);
        CloseLoginModal();
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
    }

    private void AddToCart(Product product)
    {
        CartService.AddToCart(product);
    }

    private void NavigateToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
    }

    public void Dispose()
    {
        CartService.CartChanged -= OnCartChanged;
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }
}